@model PrintHistoryModel
@{
	ViewData["Title"] = "Lịch sử in";
	Layout = "_Layout";
}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link
	href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
	rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet" />

<div class="filter-box">
	<div class="grid-item-1">
		<p class="filter-title">Mã lọc</p>

		<div class="filter-item-1">
			<label for="from-date">
				<span style="margin-right: 10px;">Thời gian:</span>
			</label>
			<input type="date" id="from-date" asp-for="FromDate">
			<span style="margin-left: 10px; margin-right: 10px;">tới</span>
			<input type="date" id="to-date" asp-for="ToDate">

			<script>
				document.addEventListener('DOMContentLoaded', function () {
					// Get the input elements
					var fromDateInput = document.getElementById('from-date');
					var toDateInput = document.getElementById('to-date');

					// Get today's date
					var today = new Date();

					// Calculate the date one month ago
					var oneMonthAgo = new Date(today);
					oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

					// Function to format date as yyyy-MM-dd
					function formatDateForInput(date) {
						var day = date.getDate().toString().padStart(2, '0');
						var month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-based
						var year = date.getFullYear();
						return year + '-' + month + '-' + day;
					}

					// Function to format date as dd/MM/yyyy
					function formatDateForDisplay(date) {
						var day = date.getDate().toString().padStart(2, '0');
						var month = (date.getMonth() + 1).toString().padStart(2, '0');
						var year = date.getFullYear();
						return day + '/' + month + '/' + year;
					}

					// Set the initial values in yyyy-MM-dd format (required for input type="date")
					fromDateInput.value = formatDateForInput(oneMonthAgo);
					toDateInput.value = formatDateForInput(today);

					// Display the dates in dd/MM/yyyy format using a workaround
					function displayFormattedDate(inputElement) {
						var initialValue = inputElement.value; // yyyy-MM-dd
						if (initialValue) {
							var dateParts = initialValue.split('-');
							if (dateParts.length === 3) {
								var year = parseInt(dateParts[0], 10);
								var month = parseInt(dateParts[1], 10) - 1;
								var day = parseInt(dateParts[2], 10);
								var dateObj = new Date(year, month, day);
								// Create a hidden input to store the yyyy-MM-dd value
								var hiddenInput = document.createElement('input');
								hiddenInput.type = 'hidden';
								hiddenInput.name = inputElement.name; // Same name as the date input
								hiddenInput.id = inputElement.id + '-hidden';
								hiddenInput.value = initialValue;
								inputElement.parentNode.insertBefore(hiddenInput, inputElement.nextSibling);
								// Change the input type to text to display dd/MM/yyyy
								inputElement.type = 'text';
								inputElement.value = formatDateForDisplay(dateObj);
								// Update the hidden input when the displayed value changes
								inputElement.addEventListener('change', function () {
									var displayParts = inputElement.value.split('/');
									if (displayParts.length === 3) {
										var displayDay = parseInt(displayParts[0], 10);
										var displayMonth = parseInt(displayParts[1], 10) - 1;
										var displayYear = parseInt(displayParts[2], 10);
										var displayDateObj = new Date(displayYear, displayMonth, displayDay);
										hiddenInput.value = formatDateForInput(displayDateObj);
									}
								});
							}
						}
					}
					displayFormattedDate(fromDateInput);
					displayFormattedDate(toDateInput);
				});

				document.addEventListener("DOMContentLoaded", () => {
					const fileInput = document.querySelector(".filter-file-input");
					const priceInput = document.querySelector(".filter-price-input");
					const tagInput = document.querySelector(".filter-tag-input");
					const addButtons = document.querySelectorAll(".ri-add-circle-line");
					const deleteButton = document.querySelector(".ri-close-circle-line");

					let tags = [];

					const updateTagInput = () => {
							tagInput.value = tags.join(", ");
					};

					const addTag = (value) => {
						if (!tags.includes(value)) { 
							tags.push(value);
							updateTagInput();
						}
					};

					const clearTags = () => {
						tags = []; 
						updateTagInput(); 
						deleteButton.style.display = "none"; 
					};

					addButtons.forEach((button) => {
						button.addEventListener("click", () => {
							let inputValue = "";
							if (button.previousElementSibling.classList.contains("filter-file-input")) {
								inputValue = fileInput.value.trim();
							} else if (button.previousElementSibling.classList.contains("filter-price-input")) {
								inputValue = priceInput.value.trim();
							}

							if (inputValue) {
								addTag(inputValue);
								button.previousElementSibling.value = ""; 
								deleteButton.style.display = "inline"; 
							}
						});
					});

					deleteButton.addEventListener("click", () => {
							clearTags();
					});

					deleteButton.style.display = "none";
				});
			</script>
		</div>

		<div style="display: flex; margin-top: 5%;">
			<label class="filter-tag">Tag lọc :</label>
			<div class="filter-tag-input-block">
				<input placeholder="Nhập điều kiện lọc" class="filter-tag-input">
				<button class="ri-close-circle-line delete-button"></button>
			</div>
		</div>

		<div class="filter-buttons">
			<button class="btn btn-secondary">Xóa</button>
			<button class="btn btn-primary" id="filterButton">Lọc</button>
			<button class="btn btn-primary" onclick="window.location.href='/Student/Stats'">Báo cáo thống kê</button>
		</div>
	</div>

	<div class="grid-item-2">
		<div class="input-tag-block">
			<p style="margin-left: 10px;">Loại file:</p>
			<div>
				<input placeholder="file" class="filter-file-input">
				<button class="ri-add-circle-line delete-button"></button>
			</div>
		</div>

		<div class="input-tag-block">
			<p style="margin-left: 10px;">Chi phí:</p>
			<div>
				<input placeholder="" class="filter-price-input">
				<button class="ri-add-circle-line delete-button"></button>
			</div>
		</div>
	</div>
</div>

<div class="print-history">
	@* Records will be loaded here *@
</div>

<style>
	.filter-box {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 10px;
		margin-top: 2%
	}

	.grid-item-1,
	.grid-item-2, {
		padding-top: 10%;
	}

	.grid-item-2 {
		margin-top: 5%;
		margin-left: 5%;
		display: flex;
	}

	.filter-title,
	.filter-tag {
		font-family: 'Roboto', sans-serif;
		font-weight: bold;
		font-size: 22px;
	}

	.filter-tag {
		margin-right: 5px;
	}

	.filter-tag-input {
		width: 150px;
		border: none;
		background-color: #ddd;
	}

	.delete-button {
		border: none;
		background-color: #ddd;
	}

	.filter-tag-input-block {
		background-color: #ddd;
		padding: 5px 5px;
	}

	.filter-buttons .btn {
		margin-top: 3%;
		padding: 15px 60px;
		font-size: 14px;
		border-radius: 5px;
		cursor: pointer;
	}

	.btn-primary {
		background-color: #000;
		color: #fff;
		border: none;
		margin-left: 2%;
		border: solid 2px #333;
	}

	.btn-primary:hover {
		background-color: #ddd;
		color: #000;
		border: none;
	}

	.btn-secondary {
		background-color: #fff;
		color: #000;
		border: solid 2px #333;
	}

	.input-tag-block {
		background-color: #ddd;
		width: 20%;
		height: 30%;
		border-bottom: solid 2px #333;
		margin-right: 20%;
	}

	.input-tag-block p {
		margin-bottom: 0px;
	}

	.filter-file-input, .filter-price-input {
		width: 70px;
		margin-left: 10px;
		border: none;
		background-color: #ddd;
	}

	.print-history {
		margin-top: 5%;
		background-color: #fff;
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 20px;
		max-height: 500px;
		overflow-y: auto;
	}

	.record {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 10px 0;
		border-bottom: 1px solid #ddd;
	}

	.record:last-child {
		border-bottom: none;
	}

	.record-details p {
		margin: 5px 0;
		font-size: 0.9rem;
	}

	.status-icon {
		font-size: 1.5rem;
	}

	/* For Remix Icon */
	.done-icon {
		color: green;
	}

	.ri-check-line.done-icon {
		/*check mark icon*/
		color: green;
	}

	.pending-icon {
		color: orange;
	}

	.ri-time-line.pending-icon {
		/*clock icon*/
		color: orange;
	}

	.error-icon {
		color: red;
	}

	.ri-close-circle-line.error-icon {
		/*error icon*/
		color: red;
	}

	.ri-loader-4-line.pending-icon {
		color: orange
	}
</style>

<script>
	// Sample data - now includes a 'status' field
	var printRecords = [
		{ fileName: "ABC.pdf", printerId: "1111", date: "2024-10-27", cost: "4 trang A4", type: "pdf", status: "done" },
		{ fileName: "AZ.pdf", printerId: "1112", date: "2024-10-27", cost: "7 trang A4", type: "pdf", status: "done" },
		{ fileName: "HCMUT.pdf", printerId: "1111", date: "2024-10-26", cost: "2 trang A4", type: "pdf", status: "pending" },
		{ fileName: "A.docx", printerId: "1113", date: "2024-10-25", cost: "2 trang A4", type: "docx", status: "error" },
		{ fileName: "Report.docx", printerId: "1112", date: "2024-10-25", cost: "5 trang A4", type: "docx", status: "done" },
		{ fileName: "Image.jpg", printerId: "1114", date: "2024-10-24", cost: "1 trang A4", type: "jpg", status: "done" },
		{ fileName: "Presentation.pptx", printerId: "1111", date: "2024-10-23", cost: "10 trang A4", type: "pptx", status: "pending" },
		{ fileName: "Data.xlsx", printerId: "1113", date: "2024-10-23", cost: "3 trang A4", type: "xlsx", status: "error" },
		{ fileName: "Notes.txt", printerId: "1112", date: "2024-10-22", cost: "1 trang A4", type: "txt", status: "done" },
	];

	function loadRecords(records) {
		var printHistoryDiv = document.querySelector('.print-history');
		printHistoryDiv.innerHTML = ''; // Clear existing records

		records.forEach(function (record) {
			var recordDiv = document.createElement('div');
			recordDiv.classList.add('record');

			var detailsDiv = document.createElement('div');
			detailsDiv.classList.add('record-details');
			detailsDiv.innerHTML = `
				<p><strong>Tên file:</strong> ${record.fileName}</p>
				<p><strong>ID máy in:</strong> ${record.printerId}</p>
				<p><strong>Thời gian:</strong> ${record.date}</p>
				<p><strong>Chi phí:</strong> ${record.cost}</p>
				<p style="display: none;"><strong>Loại tài liệu:</strong> ${record.type}</p>
			`;

			var statusIcon = document.createElement('i');
			statusIcon.classList.add('status-icon'); // Common class for all status icons
			statusIcon.setAttribute('aria-label', record.status === 'done' ? 'Hoàn thành' : record.status === 'pending' ? 'Đang xử lý' : 'Lỗi');
			// Set icon class based on status
			switch (record.status) {
				case "done":
					statusIcon.classList.add('ri-check-line', 'done-icon'); // Checkmark
					break;
				case "pending":
					statusIcon.classList.add('ri-loader-4-line', 'pending-icon'); // loader
					break;
				case "error":
					statusIcon.classList.add('ri-close-circle-line', 'error-icon'); // Circle with X
					break;
				default:
					statusIcon.classList.add('ri-question-mark'); // Question mark (or any other default icon)
					break;
			}

			recordDiv.appendChild(detailsDiv);
			recordDiv.appendChild(statusIcon);
			printHistoryDiv.appendChild(recordDiv);
		});
	}
	function filterRecords() {
		console.log("Pressed lọc");
		var fromDate = document.getElementById('from-date').value;
		var toDate = document.getElementById('to-date').value;
		var filterTag = document.querySelector('.filter-tag-input').value;

		var filteredRecords = printRecords.filter(function (record) {
			var recordDate = new Date(record.date);
			var from = new Date(fromDate);
			var to = new Date(toDate);

			return recordDate >= from && recordDate <= to &&
				(filterTag === '' ||
					record.fileName.includes(filterTag) ||
					record.printerId.includes(filterTag) ||
					record.type.includes(filterTag)
				);
		});

		loadRecords(filteredRecords);
	}

	document.getElementById('filterButton').addEventListener('click', filterRecords);

	// Initial loading of records
	loadRecords(printRecords);
</script>